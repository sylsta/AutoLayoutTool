# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoLayoutTool
                                 A QGIS plugin
 Creates a layout with the current map canvas extent
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sylvain Th√©ry
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'AutoLayoutTool_dialog_base.ui'))


class AutoLayoutToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AutoLayoutToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # if self.debug:
        try:
            chkb = QtWidgets.QCheckBox()
            chkb.setChecked(True)
            combo = QtWidgets.QComboBox()
            combo.setCurrentIndex()
        except:
            pass

        le_legend_title = QtWidgets.QLineEdit

        for cb in [self.cb_north, self.cb_scalebar, self.cb_legend]:
            cb.addItems([self.tr(u'Top left corner'), self.tr(u'Top right corner'), self.tr(u'Bottom left corner'),
                    self.tr(u'Bottom right corner')])
        self.cb_north.setCurrentIndex(3)
        self.cb_scalebar.setCurrentIndex(4)
        self.cb_legend.setCurrentIndex(1)
        for chkb in [self.chkb_north_arrow, self.chkb_scalebar, self.chkb_legend, self.chkb_margin]:
            chkb.setChecked(True)
        self.le_legend_title.setText(self.tr(u'Legend'))
        self.le_margin.setText(self.tr(u'10'))


