# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoLayoutTool
                                 A QGIS plugin
 Creates a layout with the current map canvas extent
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sylvain Th√©ry
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'AutoLayoutTool_dialog_base.ui'))


class AutoLayoutToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AutoLayoutToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # if self.debug:
        try:
            chkb = QtWidgets.QCheckBox()
            chkb.setChecked(True)
            combo = QtWidgets.QComboBox()
            combo.currentText()
            qsp = QtWidgets.QSpinBox()
            combo.currentText()

        except:
            pass
        # combobox management
        self.comboBox_list = [self.cbb_north, self.cbb_scalebar, self.cbb_legend]
        self.comboBox_value = [self.tr(u'Top left corner'), self.tr(u'Top right corner'),
                               self.tr(u'Bottom left corner'), self.tr(u'Bottom right corner'), self.tr('None')]
        for i in range(len(self.comboBox_list)):
            print(i)
            self.comboBox_list[i].addItems(self.comboBox_value)
            # Cant understand why this do not work
            # comboBox.currentTextChanged.connect(lambda x: self.cbb_state_changed(x, i))
            # self.comboBox_list[i].currentTextChanged.connect(lambda x: self.cbb_state_changed(x, i))
        self.cbb_north.currentTextChanged.connect(lambda x: self.cbb_state_changed(x, 0))
        self.cbb_scalebar.currentTextChanged.connect(lambda x: self.cbb_state_changed(x, 1))
        self.cbb_legend.currentTextChanged.connect(lambda x: self.cbb_state_changed(x, 2))

        # buttons action


        # final init (will be change to false when saved config will be implemented
        self.set_default(True)

    def set_default(self, force):
        if force: # reset to default button
            self.cbb_north.setCurrentIndex(2)
            self.cbb_scalebar.setCurrentIndex(3)
            self.cbb_legend.setCurrentIndex(0)
            self.le_legend_title.setText(self.tr(u'Legend'))
            self.sb_margin_value.setValue(10)
            self.le_layout_name.setText(self.tr(u'Automatic Layout'))
        else: # form init (defaults values might have overwritten
            pass

    def cbb_state_changed(self, text, i):
        nb_of_cbb = len(self.comboBox_list)
        nb_of_cbbox_values = len(self.comboBox_value)-1
        if text != self.comboBox_value[nb_of_cbbox_values]: # value "None"
            # print("Not None")
            # print(i)
            list_id_combobox_tocheck = set(range(nb_of_cbb)) - set([i])
            print("list_id_combobox_tocheck")
            print(list_id_combobox_tocheck)
            print("-------")

            for j in list_id_combobox_tocheck:

                if self.comboBox_list[j].currentText() == text:
                    print("modif box")
                    print(self.comboBox_list[j].currentText())
                    print(j)
                    self.comboBox_list[j].setCurrentIndex(nb_of_cbb)
                    print(self.comboBox_list[j].currentText())

            # determine



        # print(type(text))

        # print(type(self.comboBox_list[i]))
        # print(self.comboBox_list[i].currentText())
